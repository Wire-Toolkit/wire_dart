@startuml
set namespaceSeparator ::

abstract class "wire::src::main.dart::WireMiddleware" {
  +void onAdd()
  +void onSend()
  +void onRemove()
  +void onData()
}

class "wire::src::main.dart::Wire<T>" {
  {static} -int _INDEX
  {static} -WireCommunicateLayer _COMMUNICATION_LAYER
  {static} -WireDataContainerLayer _DATA_CONTAINER_LAYER
  {static} -List<WireMiddleware> _MIDDLEWARE_LIST
  -String _signal
  -void Function(T, int) _listener
  -int _wid
  -Object _scope
  +int replies
  +String signal
  +void Function(T, int) listener
  +int wid
  +Object scope
  +void transfer()
  +void clear()
  {static} +void attach()
  {static} +bool detach()
  {static} +Wire add()
  {static} +bool has()
  {static} +bool send()
  {static} +void purge()
  {static} +bool remove()
  {static} +void middleware()
  {static} +List get()
  {static} +WireData data()
}

"wire::src::main.dart::Wire<T>" o-- "wire::src::main.dart::WireCommunicateLayer"
"wire::src::main.dart::Wire<T>" o-- "wire::src::main.dart::WireDataContainerLayer"
"wire::src::main.dart::Wire<T>" o-- "wire::src::main.dart::void Function(T, int)"

class "wire::src::main.dart::WireCommunicateLayer" {
  -Map<int, Wire> _wireByWID
  -Map<String, List<int>> _widsBySignal
  +Wire add()
  +bool hasSignal()
  +bool hasWire()
  +bool send()
  +bool remove()
  +void clear()
  +List getBySignal()
  +List getByScope()
  +List getByListener()
  +Wire getByWID()
  -bool _removeWire()
}

class "wire::src::main.dart::WireDataContainerLayer" {
  -Map<String, WireData> _map
  +WireData get()
  +void clear()
}

class "wire::src::main.dart::WireData<T>" {
  -Function _onRemove
  -Set<void Function(T)> _listeners
  -bool _isSet
  -String _key
  -T _value
  +bool isSet
  +String key
  +T value
  +void refresh()
  +void remove()
  +WireData subscribe()
  +WireData unsubscribe()
  +bool hasListener()
}


@enduml