@startuml
set namespaceSeparator ::

abstract class "wire::src::main.dart::WireMiddleware" {
  +void onAdd()
  +void onSend()
  +void onRemove()
  +void onData()
}

class "wire::src::main.dart::Wire" {
  {static} -int _INDEX
  {static} -WireLayer _LAYER
  {static} -WireStore _STORE
  {static} -List<WireMiddleware> _MIDDLEWARE_LIST
  -String _signal
  -void Function(Wire, dynamic) _listener
  -int _hash
  -Object _scope
  +int replies
  +String signal
  +void Function(Wire, dynamic) listener
  +int hash
  +Object scope
  +void transfer()
  {static} +void attach()
  {static} +bool detach()
  {static} +Wire add()
  {static} +bool has()
  {static} +bool send()
  {static} +void purge()
  {static} +bool remove()
  {static} +void middleware()
  {static} +List get()
  {static} +WireData data()
}

"wire::src::main.dart::Wire" o-- "wire::src::main.dart::WireLayer"
"wire::src::main.dart::Wire" o-- "wire::src::main.dart::WireStore"
"wire::src::main.dart::Wire" o-- "wire::src::main.dart::void Function(Wire, dynamic)"

class "wire::src::main.dart::WireStore" {
  -Map<String, WireData> _map
  +dynamic get()
  +void clear()
}

class "wire::src::main.dart::WireLayer" {
  -Map<int, Wire> _wireByHash
  -Map<String, List<int>> _hashesBySignal
  +Wire add()
  +bool hasSignal()
  +bool hasWire()
  +bool send()
  +bool remove()
  +void clear()
  +List getBySignal()
  +List getByScope()
  +List getByListener()
  -bool _removeSignal()
}

class "wire::src::main.dart::WireData" {
  -Function _onRemove
  -Map<Object, List<void Function(dynamic)>> _listeners
  -bool _isSet
  -dynamic _key
  -dynamic _value
  +bool isSet
  +dynamic key
  +dynamic value
  +void refresh()
  +void remove()
  +WireData subscribe()
  +WireData unsubscribe()
}


@enduml